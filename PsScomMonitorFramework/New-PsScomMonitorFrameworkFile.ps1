function New-PsScomMonitorFrameworkFile {
    <#
            .Synopsis
            Creates a new file to be used with the SCOM Monitor Framework

            .Description
            This function was created to be used together with a DSC resource to automate the creation of Monitor Framework PSD1 files.
            The output is a PSD1 file with all the given objects in it.

            The reason this function accepts object is because this way it's easy to update the PSD1. We just use multiple objects and generate the file in one function.

            .Example
            $service2 = [pscustomobject]@{
                Name = 'bits'
                AlertOwner = 'Servers'
                MaxCpu = 10
                NumCpuSamples = 5
                MaxMemory = 200
                NumMemorySamples = 4
            }

            $powershell = [pscustomobject]@{
                Name = 'My Custom PowerShell Monitor'
                AlertOwner = 'OfficeGroup'
                IntervalSeconds = 900
                Script = {
                    $scriptError = Get-Content D:\CriticalLogfile.txt | Where-Object {
                        $_ -like 'Error'
                    }

                    $alertLevel = If($scriptError) {
                        'Critical'
                    }
                    else {
                        'Healthy'
                    }
        
                    [pscustomobject]@{
                        result = $scriptError
                        alertLevel = $alertLevel
                        alertDescription = "An error was detected in CriticalLogfile. These were the lines captured: $scriptError"
                    }
                }
            }

            New-PsScomMonitorFrameworkFile -Service $service -PowerShellMonitor $powershell -FilePath 'C:\Program Files\Optiver\Monitoring\scom-monitordata.psd1'

            This example generates a new monitor framework file in 'C:\Program Files\Optiver\Monitoring\scom-monitordata.psd1'

    #>

    [CmdletBinding(
            SupportsShouldProcess,
            ConfirmImpact = 'Low'
    )]
    [OutputType([System.IO.FileInfo])]
    param (
        # The Service object to include in the Monitor Framework File.
        [Parameter()]
        [Object[]]$Service,
        
        # The PowerShell Monitor object to include in the Monitor Framework File.
        [Parameter()]
        [Object[]]$PowerShellMonitor,
        
        # The path where to output the Monitor Framework file
        [Parameter(
                Mandatory
        )]
        [string]$FilePath
    )

    $stringBuilder = New-Object System.Text.StringBuilder
    function Add-Line {
        [CmdletBinding(
                DefaultParameterSetName = 'line'
        )]
        param (
            [Parameter(Mandatory)][System.Text.StringBuilder]$StringBuilder,
            [Alias('Line')]
            [Parameter(Mandatory)][String]$Template,
            
            [Parameter(ParameterSetName = 'list', Mandatory)]
            [AllowEmptyString()]
            [String[]]$ArgumentList
        )
        $line = 
            if ($ArgumentList) {
                $Template -f $ArgumentList
            } else {
                $Template
            }
        $null = $StringBuilder.AppendLine($line)
    }
    
    $templateLine = "$(' ' * 12){0} = '{1}'"
    $templateBool = "$(' ' * 12){0} = `${1}"
    $templateInt = "$(' ' * 12){0} = {1}"

    $PSDefaultParameterValues = @{
        'Add-Line:StringBuilder' = $stringBuilder
        'Add-Line:Template' = $templateLine
    }
    
    If($Service) {
        $requiredServiceProperties = @('Name','AlertOwner','MaxCpu','NumCpuSamples','MaxMemory','NumMemorySamples')
        $foundServiceProperties = @()
        $Service | ForEach-Object {
            $_.psobject.properties.name | Foreach-Object {
                If($_ -notin $requiredServiceProperties) {
                    $foundServiceProperties += $_
                    Throw "The service object must specify (only) these properties: $($requiredServiceProperties -join ','). Properties found: $($foundServiceProperties -join ',')"
                }
            }
        }
    }
    
    If($PowerShellMonitor) {
        $requiredPowerShellProperties = @('Name','AlertOwner','IntervalSeconds','Script')
        $foundPowerShellProperties = @()
        $PowerShellMonitor | ForEach-Object {
            $_.psobject.properties.name | Foreach-Object {
                $foundPowerShellProperties += $_
                If($_ -notin $requiredPowerShellProperties) {
                    Throw "The powershell object must specify (only) these properties: $($requiredPowerShellProperties -join ','). Properties found: $($foundPowerShellProperties -join ',')"
                }
            }
        }
    }
    
    Add-Line -Line "# Auto generated by $env:USERNAME on $env:COMPUTERNAME at $(Get-Date -Format 'yyyy-MM-dd HH:mm') - do not modify this file by hand"
    Add-Line -Line '@{'
    Add-Line -Line "$(' ' * 4)service = @{"
    If($Service) {
        $Service | ForEach-Object {
            $monitor = $_
            Add-Line -Line "$(' ' * 8)'$($monitor.Name)' = @{"
            $monitor.psobject.properties.name.Where({$_ -ne 'Name'}) | ForEach-Object {
                
                $property = $_
                switch ($monitor.$property.GetType().Name) {
                    'String' { Add-Line -ArgumentList $property, $monitor.$property }
                    'Int32' { Add-Line -ArgumentList $property, $monitor.$property -Template $templateInt }
                    'Boolean' { Add-Line -ArgumentList $property, $monitor.$property -Template $templateBool }
                }
            }
            Add-Line -Line "$(' ' * 8)}"
        }
    }
    Add-Line -Line "$(' ' * 4)}"
    Add-Line -Line "$(' ' * 4)powershell = @{"
    If($PowerShellMonitor) {
        $PowerShellMonitor | ForEach-Object {
            $monitor = $_
            Add-Line -Line "$(' ' * 8)'$($monitor.Name)' = @{"
            $monitor.psobject.properties.name.Where({$_ -ne 'Name'}) | ForEach-Object {
                
                $property = $_
                switch ($monitor.$property.GetType().Name) {
                    'String' { Add-Line -ArgumentList $property, $monitor.$property }
                    'Int32' { Add-Line -ArgumentList $property, $monitor.$property -Template $templateInt }
                    'Boolean' { Add-Line -ArgumentList $property, $monitor.$property -Template $templateBool }
                    'ScriptBlock' {
                        Add-Line -Line "$(' ' * 12)$property = {"
                        $monitor.$property.ToString().Split("`r`n") | Where-Object {-not([string]::IsNullOrWhiteSpace($_))} | Foreach-Object {

                            If($_.StartsWith((' ' * 16))){
                                Add-Line -Line "$_"
                            }
                            Else {
                                Add-Line -Line "$(' ' * 16)$_"
                            }
                        }
                        Add-Line -Line "$(' ' * 12)}"
                    }
                }
            }
            Add-Line -Line "$(' ' * 8)}"
        }
    }
    Add-Line -Line "$(' ' * 4)}"
    Add-Line -Line "}"
    
    $stringBuilder.ToString()
    
    if ($PSCmdlet.ShouldProcess(
            $FilePath,
            "Save Monitor Framework configuration file"
    )) {
        try {
            $stringBuilder.ToString() | Set-Content -LiteralPath $FilePath -Encoding UTF8 -Force -ErrorAction Stop
            Get-Item -LiteralPath $FilePath -ErrorAction Stop
        } catch {
            throw "Failed to save Monitor Framework file to $FilePath - $_"
        }
    }
}